#-----------------------------------------------------------
# Vivado v2020.1 (64-bit)
# SW Build 2902540 on Wed May 27 19:54:49 MDT 2020
# IP Build 2902112 on Wed May 27 22:43:36 MDT 2020
# Start of session at: Thu Mar 25 12:43:38 2021
# Process ID: 13316
# Current directory: C:/Users/User/ring_oscillator_zynq/simple_ro
# Command line: vivado.exe -gui_launcher_event rodinguilauncherevent20884 C:\Users\User\ring_oscillator_zynq\simple_ro\simple_ro.xpr
# Log file: C:/Users/User/ring_oscillator_zynq/simple_ro/vivado.log
# Journal file: C:/Users/User/ring_oscillator_zynq/simple_ro\vivado.jou
#-----------------------------------------------------------
start_gui
open_project C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.xpr
update_compile_order -fileset sources_1
open_bd_design {C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.srcs/sources_1/bd/design_1/design_1.bd}
startgroup
set_property -dict [list CONFIG.SIZE {75}] [get_bd_cells Ring_Oscillator]
endgroup
save_bd_design
reset_run synth_1
reset_run design_1_simple_ro_0_0_synth_1
launch_runs impl_1 -to_step write_bitstream -jobs 6
wait_on_run impl_1
ipx::edit_ip_in_project -upgrade true -name Frequency_counter_AXI4_v1_0_project -directory C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.tmp/Frequency_counter_AXI4_v1_0_project c:/Users/User/ring_oscillator_zynq/ip_repo/Frequency_counter_AXI4_1.0/component.xml
update_compile_order -fileset sources_1
ipx::merge_project_changes files [ipx::current_core]
set_property core_revision 18 [ipx::current_core]
ipx::update_source_project_archive -component [ipx::current_core]
ipx::create_xgui_files [ipx::current_core]
ipx::update_checksums [ipx::current_core]
ipx::save_core [ipx::current_core]
ipx::move_temp_component_back -component [ipx::current_core]
close_project -delete
update_ip_catalog -rebuild -repo_path c:/Users/User/ring_oscillator_zynq/ip_repo/Frequency_counter_AXI4_1.0
report_ip_status -name ip_status 
upgrade_ip -vlnv xilinx.com:user:Frequency_counter_AXI4:1.0 [get_ips  design_1_Frequency_counter_AX_0_0] -log ip_upgrade.log
export_ip_user_files -of_objects [get_ips design_1_Frequency_counter_AX_0_0] -no_script -sync -force -quiet
generate_target all [get_files  C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.srcs/sources_1/bd/design_1/design_1.bd]
catch { config_ip_cache -export [get_ips -all design_1_Frequency_counter_AX_0_0] }
catch { config_ip_cache -export [get_ips -all design_1_auto_pc_0] }
export_ip_user_files -of_objects [get_files C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.srcs/sources_1/bd/design_1/design_1.bd] -no_script -sync -force -quiet
create_ip_run [get_files -of_objects [get_fileset sources_1] C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.srcs/sources_1/bd/design_1/design_1.bd]
launch_runs design_1_Frequency_counter_AX_0_0_synth_1 -jobs 6
wait_on_run design_1_Frequency_counter_AX_0_0_synth_1
export_simulation -of_objects [get_files C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.srcs/sources_1/bd/design_1/design_1.bd] -directory C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.ip_user_files/sim_scripts -ip_user_files_dir C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.ip_user_files -ipstatic_source_dir C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.ip_user_files/ipstatic -lib_map_path [list {modelsim=C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.cache/compile_simlib/modelsim} {questa=C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.cache/compile_simlib/questa} {riviera=C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.cache/compile_simlib/riviera} {activehdl=C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.cache/compile_simlib/activehdl}] -use_ip_compiled_libs -force -quiet
report_ip_status -name ip_status 
reset_run synth_1
launch_runs impl_1 -to_step write_bitstream -jobs 6
wait_on_run impl_1
open_run impl_1
open_bd_design {C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.srcs/sources_1/bd/design_1/design_1.bd}
ipx::edit_ip_in_project -upgrade true -name Frequency_counter_AXI4_v1_0_project -directory C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.tmp/Frequency_counter_AXI4_v1_0_project c:/Users/User/ring_oscillator_zynq/ip_repo/Frequency_counter_AXI4_1.0/component.xml
update_compile_order -fileset sources_1
ipx::merge_project_changes files [ipx::current_core]
set_property core_revision 19 [ipx::current_core]
ipx::update_source_project_archive -component [ipx::current_core]
ipx::create_xgui_files [ipx::current_core]
ipx::update_checksums [ipx::current_core]
ipx::save_core [ipx::current_core]
ipx::move_temp_component_back -component [ipx::current_core]
close_project -delete
update_ip_catalog -rebuild -repo_path c:/Users/User/ring_oscillator_zynq/ip_repo/Frequency_counter_AXI4_1.0
report_ip_status -name ip_status 
upgrade_ip -vlnv xilinx.com:user:Frequency_counter_AXI4:1.0 [get_ips  design_1_Frequency_counter_AX_0_0] -log ip_upgrade.log
export_ip_user_files -of_objects [get_ips design_1_Frequency_counter_AX_0_0] -no_script -sync -force -quiet
generate_target all [get_files  C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.srcs/sources_1/bd/design_1/design_1.bd]
catch { config_ip_cache -export [get_ips -all design_1_Frequency_counter_AX_0_0] }
catch { config_ip_cache -export [get_ips -all design_1_auto_pc_0] }
export_ip_user_files -of_objects [get_files C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.srcs/sources_1/bd/design_1/design_1.bd] -no_script -sync -force -quiet
create_ip_run [get_files -of_objects [get_fileset sources_1] C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.srcs/sources_1/bd/design_1/design_1.bd]
launch_runs design_1_Frequency_counter_AX_0_0_synth_1 -jobs 6
wait_on_run design_1_Frequency_counter_AX_0_0_synth_1
export_simulation -of_objects [get_files C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.srcs/sources_1/bd/design_1/design_1.bd] -directory C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.ip_user_files/sim_scripts -ip_user_files_dir C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.ip_user_files -ipstatic_source_dir C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.ip_user_files/ipstatic -lib_map_path [list {modelsim=C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.cache/compile_simlib/modelsim} {questa=C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.cache/compile_simlib/questa} {riviera=C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.cache/compile_simlib/riviera} {activehdl=C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.cache/compile_simlib/activehdl}] -use_ip_compiled_libs -force -quiet
report_ip_status -name ip_status 
reset_run synth_1
launch_runs impl_1 -to_step write_bitstream -jobs 6
wait_on_run impl_1
ipx::edit_ip_in_project -upgrade true -name Frequency_counter_AXI4_v1_0_project -directory C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.tmp/Frequency_counter_AXI4_v1_0_project c:/Users/User/ring_oscillator_zynq/ip_repo/Frequency_counter_AXI4_1.0/component.xml
update_compile_order -fileset sources_1
synth_design -rtl -name rtl_1
refresh_design
refresh_design
refresh_design
refresh_design
refresh_design
ipx::merge_project_changes files [ipx::current_core]
set_property core_revision 20 [ipx::current_core]
ipx::update_source_project_archive -component [ipx::current_core]
ipx::create_xgui_files [ipx::current_core]
ipx::update_checksums [ipx::current_core]
ipx::save_core [ipx::current_core]
ipx::move_temp_component_back -component [ipx::current_core]
close_project -delete
update_ip_catalog -rebuild -repo_path c:/Users/User/ring_oscillator_zynq/ip_repo/Frequency_counter_AXI4_1.0
report_ip_status -name ip_status 
upgrade_ip -vlnv xilinx.com:user:Frequency_counter_AXI4:1.0 [get_ips  design_1_Frequency_counter_AX_0_0] -log ip_upgrade.log
export_ip_user_files -of_objects [get_ips design_1_Frequency_counter_AX_0_0] -no_script -sync -force -quiet
generate_target all [get_files  C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.srcs/sources_1/bd/design_1/design_1.bd]
catch { config_ip_cache -export [get_ips -all design_1_Frequency_counter_AX_0_0] }
catch { config_ip_cache -export [get_ips -all design_1_auto_pc_0] }
export_ip_user_files -of_objects [get_files C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.srcs/sources_1/bd/design_1/design_1.bd] -no_script -sync -force -quiet
create_ip_run [get_files -of_objects [get_fileset sources_1] C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.srcs/sources_1/bd/design_1/design_1.bd]
launch_runs design_1_Frequency_counter_AX_0_0_synth_1 -jobs 6
wait_on_run design_1_Frequency_counter_AX_0_0_synth_1
export_simulation -of_objects [get_files C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.srcs/sources_1/bd/design_1/design_1.bd] -directory C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.ip_user_files/sim_scripts -ip_user_files_dir C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.ip_user_files -ipstatic_source_dir C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.ip_user_files/ipstatic -lib_map_path [list {modelsim=C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.cache/compile_simlib/modelsim} {questa=C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.cache/compile_simlib/questa} {riviera=C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.cache/compile_simlib/riviera} {activehdl=C:/Users/User/ring_oscillator_zynq/simple_ro/simple_ro.cache/compile_simlib/activehdl}] -use_ip_compiled_libs -force -quiet
report_ip_status -name ip_status 
reset_run synth_1
launch_runs impl_1 -to_step write_bitstream -jobs 6
wait_on_run impl_1
close_project
create_project frequency_counter C:/Users/User/ring_oscillator_zynq/frequency_counter -part xc7z020clg400-1
set_property board_part www.digilentinc.com:pynq-z1:part0:1.0 [current_project]
set_property simulator_language Verilog [current_project]
add_files -norecurse C:/Users/User/ring_oscillator_zynq/ip_repo/Frequency_counter_AXI4_1.0/src/frequency_counter.v
update_compile_order -fileset sources_1
launch_runs impl_1 -jobs 6
wait_on_run impl_1
launch_simulation -mode post-implementation -type timing
source frequency_counter.tcl
add_force {/frequency_counter/clk} -radix bin {1 0ns} {1 5000ps} -repeat_every 10000ps
add_force {/frequency_counter/clk} -radix bin {1 0ns} {9 5000ps} -repeat_every 10000ps
add_force {/frequency_counter/clk} -radix bin {0 0ns} {0 5000ps} -repeat_every 10000ps
add_force {/frequency_counter/clk} -radix bin {0 0ns} {1 5000ps} -repeat_every 10000ps
run all
relaunch_sim
add_force {/frequency_counter/clk} -radix bin {0 0ns} {1 5000ps} -repeat_every 10000ps
run all
synth_design -rtl -name rtl_1
refresh_design
refresh_design
refresh_design
refresh_design
refresh_design
reset_run synth_1
launch_runs impl_1 -jobs 6
wait_on_run impl_1
launch_simulation
source frequency_counter.tcl
reset_run impl_1
launch_runs impl_1 -jobs 6
wait_on_run impl_1
close_sim
close_sim
reset_run synth_1
launch_runs synth_1 -jobs 6
wait_on_run synth_1
launch_runs impl_1 -jobs 6
wait_on_run impl_1
refresh_design
reset_run synth_1
launch_runs impl_1 -jobs 6
wait_on_run impl_1
current_design impl_1
close_design
launch_simulation -mode post-implementation -type timing
source frequency_counter.tcl
relaunch_sim
add_force {/frequency_counter/in_signal} -radix bin {1 20ns} {0 22000ps} -repeat_every 4000ps
add_force {/frequency_counter/clk} -radix bin {1 0ns} {0 5000ps} -repeat_every 10000ps
run 50 ns
run 50 ns
run 50 ns
run 50 ns
step
step
run 50 ns
current_wave_config {Untitled 3}
add_wave {{/frequency_counter/clk_done_reg_n_0_BUFG}} {{/frequency_counter/clk_done_reg_n_0_BUFG_inst_n_0}} 
run 1 ms
run 100 us
run 100 us
run 100 us
run 1 us
run 1 us
run 1 us
run 100 ns
run 100 ns
run 100 ns
run 100 ns
run 100 ns
run 100 ns
run 100 ns
run 100 ns
run 100 ns
run 100 ns
run 100 us
run 100 us
run 1 ms
add_force {/frequency_counter/in_signal} -radix bin {1 0ns} {0 500ps} -repeat_every 1000ps
current_design rtl_1
current_wave_config {Untitled 3}
add_wave {{/frequency_counter/\freq_count[0]_i_2_n_0 }} 
current_wave_config {Untitled 3}
add_wave {{/frequency_counter/freq}} 
launch_simulation -mode post-synthesis -type timing
source frequency_counter.tcl
add_force {/frequency_counter/clk} -radix hex {1 0ns} {0 5000ps} -repeat_every 10000ps
add_force {/frequency_counter/in_signal} -radix hex {1 10ns} {0 15000ps} -repeat_every 10000ps
run 1 ms
run 1 us
relaunch_sim
save_wave_config {C:/Users/User/ring_oscillator_zynq/frequency_counter/frequency_counter_time_synth.wcfg}
add_files -fileset sim_1 -norecurse C:/Users/User/ring_oscillator_zynq/frequency_counter/frequency_counter_time_synth.wcfg
set_property xsim.view C:/Users/User/ring_oscillator_zynq/frequency_counter/frequency_counter_time_synth.wcfg [get_filesets sim_1]
close_sim
close_sim
current_design rtl_1
refresh_design
reset_run synth_1
launch_runs impl_1 -jobs 6
wait_on_run impl_1
refresh_design
reset_run synth_1
launch_runs impl_1 -jobs 6
wait_on_run impl_1
current_design synth_1
close_design
launch_simulation -mode post-synthesis -type timing
open_wave_config C:/Users/User/ring_oscillator_zynq/frequency_counter/frequency_counter_time_synth.wcfg
source frequency_counter.tcl
add_force {/frequency_counter/clk} -radix bin {1 0ns} {0 5000ps} -repeat_every 10000ps
add_force {/frequency_counter/in_signal} -radix bin {0 0ns} {1 5000ps} -repeat_every 10000ps
run 1 ms
run 1 us
run 1 us
run 1 ms
current_wave_config {frequency_counter_time_synth.wcfg}
add_wave {{/frequency_counter/clk_count0}} 
relaunch_sim
run 2 ms
save_wave_config {C:/Users/User/ring_oscillator_zynq/frequency_counter/frequency_counter_time_synth.wcfg}
run 2 ms
run 1 ms
run 1 us
run all
run 1 us
run 1 us
run 1 us
run 1 us
run 1 us
run 1 us
run 1 us
run 1 ns
run 1 ns
relaunch_sim
run 1 ns
run 1 ns
run 1 us
run 1 us
step
step
close_sim
launch_simulation -mode post-synthesis -type timing
open_wave_config C:/Users/User/ring_oscillator_zynq/frequency_counter/frequency_counter_time_synth.wcfg
source frequency_counter.tcl
add_force {/frequency_counter/clk} -radix bin {1 0ns} {0 5000ps} -repeat_every 10000ps
add_force {/frequency_counter/in_signal} -radix bin {0 10ns} {1 15000ps} -repeat_every 10000ps
run 2 ms
current_wave_config {frequency_counter_time_synth.wcfg}
add_wave {{/frequency_counter/clk_done}} 
save_wave_config {C:/Users/User/ring_oscillator_zynq/frequency_counter/frequency_counter_time_synth.wcfg}
save_wave_config {C:/Users/User/ring_oscillator_zynq/frequency_counter/frequency_counter_time_synth.wcfg}
relaunch_sim
run 2 ms
add_force {/frequency_counter/clk} -radix bin {1 0ns} {0 5000ps} -repeat_every 10000ps
add_force {/frequency_counter/in_signal} -radix bin {0 10ns} {1 15000ps} -repeat_every 10000ps
run all
save_wave_config {C:/Users/User/ring_oscillator_zynq/frequency_counter/frequency_counter_time_synth.wcfg}
save_wave_config {C:/Users/User/ring_oscillator_zynq/frequency_counter/frequency_counter_time_synth.wcfg}
reset_run synth_1
launch_runs synth_1 -jobs 6
wait_on_run synth_1
close_sim
close_design
launch_simulation -mode post-synthesis -type timing
open_wave_config C:/Users/User/ring_oscillator_zynq/frequency_counter/frequency_counter_time_synth.wcfg
source frequency_counter.tcl
add_force {/frequency_counter/clk} -radix bin {1 0ns} {0 5000ps} -repeat_every 10000ps
add_force {/frequency_counter/in_signal} -radix bin {0 10ns} {1 15000ps} -repeat_every 10000ps
run 2 ms
close_sim
reset_run synth_1
launch_runs synth_1 -jobs 6
wait_on_run synth_1
close_design
refresh_design
launch_simulation -mode post-synthesis -type timing
open_wave_config C:/Users/User/ring_oscillator_zynq/frequency_counter/frequency_counter_time_synth.wcfg
source frequency_counter.tcl
add_force {/frequency_counter/clk} -radix bin {1 0ns} {0 5000ps} -repeat_every 10000ps
add_force {/frequency_counter/in_signal} -radix bin {0 10ns} {1 15000ps} -repeat_every 10000ps
run 2 ms
run 2 ms
add_force {/frequency_counter/in_signal} -radix bin {1 10ns} {0 10500ps} -repeat_every 1000ps
run 2 ms
add_force {/frequency_counter/in_signal} -radix bin {0 10ns} {1 11000ps} -repeat_every 2000ps
run 2 ms
add_force {/frequency_counter/in_signal} -radix bin {1 0ns} {0 2500ps} -repeat_every 5000ps
run 2 ms
add_force {/frequency_counter/in_signal} -radix bin {0 0ns} {1 50000ps} -repeat_every 100000ps
run 2 ms
save_wave_config {C:/Users/User/ring_oscillator_zynq/frequency_counter/frequency_counter_time_synth.wcfg}
run 2 us
run 2 us
run 2 us
run 2 us
run 2 us
run 2 us
run 2 us
run 2 us
run 2 us
run 2 us
run 2 us
run 2 us
relaunch_sim
add_force {/frequency_counter/clk} -radix bin {1 10ns} {0 60000ps} -repeat_every 100000ps
add_force {/frequency_counter/in_signal} -radix bin {0 3ns} {1 53000ps} -repeat_every 100000ps
run 15.1 ms
relaunch_sim
add_force {/frequency_counter/in_signal} -radix hex {1 0ns} {0 5000ps} -repeat_every 10000ps
add_force {/frequency_counter/clk} -radix bin {1 3ns} {0 8000ps} -repeat_every 10000ps
run 15.1 ms
close_sim
